---
import { getCollection, getEntry, render } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import Icon from "$components/Icon.astro";
import i18nit from "$i18n";

let { locale, author, copyright } = Astro.props;

const t = i18nit(locale);

let CC_URL: string;
let CC_label: string;

// Map Creative Commons license types to their official URLs and descriptions
switch (copyright.type) {
	case "CC BY 4.0":
		CC_URL = "https://creativecommons.org/licenses/by/4.0/";
		CC_label = "Attribution 4.0 International";
		break;

	case "CC BY-SA 4.0":
		CC_URL = "https://creativecommons.org/licenses/by-sa/4.0/";
		CC_label = "Attribution-ShareAlike 4.0 International";
		break;

	case "CC BY-NC 4.0":
		CC_URL = "https://creativecommons.org/licenses/by-nc/4.0/";
		CC_label = "Creative Commons Attribution-NonCommercial 4.0 International";
		break;

	case "CC BY-NC-SA 4.0":
		CC_URL = "https://creativecommons.org/licenses/by-nc-sa/4.0/";
		CC_label = "Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International";
		break;

	case "CC BY-ND 4.0":
		CC_URL = "https://creativecommons.org/licenses/by-nd/4.0/";
		CC_label = "Creative Commons Attribution-NoDerivatives 4.0 International";
		break;

	case "CC BY-NC-ND 4.0":
		CC_URL = "https://creativecommons.org/licenses/by-nc-nd/4.0/";
		CC_label = "Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International";
		break;

	default:
	case "CC0 1.0":
		CC_URL = "https://creativecommons.org/publicdomain/zero/1.0/";
		CC_label = "CC0 1.0 Universal";
		break;
}

// Build array of Creative Commons icons based on license type
// Start with base CC icon, then add specific license component icons
const CC_icons = ["fa6-brands:creative-commons"];
if (copyright.type === "CC0 1.0") {
	// CC0 uses a special "zero" icon
	CC_icons.push("fa6-brands:creative-commons-zero");
} else {
	// For other licenses, add icons based on license components
	if (copyright.type.includes("BY")) CC_icons.push("fa6-brands:creative-commons-by"); // Attribution required
	if (copyright.type.includes("NC")) CC_icons.push("fa6-brands:creative-commons-nc"); // Non-commercial
	if (copyright.type.includes("SA")) CC_icons.push("fa6-brands:creative-commons-sa"); // Share-alike
	if (copyright.type.includes("ND")) CC_icons.push("fa6-brands:creative-commons-nd"); // No derivatives
}

// Fetch notes and jottings collections to calculate total word count
// Filter by publication status and locale

const notes = await getCollection("note", note => {
	// Extract language from the file path structure
	const [language] = note.id.split("/");

	// Filter criteria: must be published and match locale
	let published = !note.data.draft;
	let localed = language == locale;

	return published && localed;
});

// Calculate total word count across all notes
const note_words = (await Promise.all(notes.map(async note => (await render(note)).remarkPluginFrontmatter.words))).reduce((summary, words) => summary + words, 0);

const jottings = await getCollection("jotting", jotting => {
	// Extract language from the file path structure
	const [language] = jotting.id.split("/");

	// Filter criteria: must be published and match locale
	let published = !jotting.data.draft;
	let localed = language == locale;

	return published && localed;
});

// Calculate total word count across all jottings
const jotting_words = (await Promise.all(jottings.map(async jotting => (await render(jotting)).remarkPluginFrontmatter.words))).reduce((summary, words) => summary + words, 0);

// Aggregate total word count
const total_words = note_words + jotting_words;

// Check if policy file exists for current locale
const policy = await getEntry("information", `${locale}/policy`);
---

<footer class="flex flex-col sm:flex-row items-center justify-between gap-2 mt-8 mb-5 sm:mb-3 text-size-sm font-mono">
	<div class="flex items-center gap-1">
		{
			copyright.type != "CC0 1.0" && [
				<span>
					<Icon name="lucide:copyright" />
				</span>,
				<span>{copyright.year}</span>
			]
		}
		{
			typeof author === "string" ? (
				<span>{author}</span>
			) : !author.link ? (
				<span>{author.name}</span>
			) : (
				<a href={author.link} target="_blank" rel="noopener noreferrer">
					{author.name}
				</a>
			)
		}
		<span>|</span>
		<a target="_blank" href={CC_URL} aria-label={CC_label} class="flex items-center gap-1">
			{CC_icons.map(icon => <Icon name={icon} />)}
		</a>
		<span>·</span>
		<span class="contents"><Icon name="lucide:activity" title={t("statistics", { words: total_words })} /></span>
		{
			policy && [
				<span>·</span>,
				<a href={getRelativeLocaleUrl(locale, "/policy")} aria-label="Policy" class="inline-flex">
					<Icon name="lucide:scale" title={t("navigation.policy")} />
				</a>
			]
		}
	</div>
	<code class="flex items-center gap-2.5">
		<p>Powered by</p>
		<a href="https://astro.build/" aria-label="Astro" target="_blank" class="inline-flex"><Icon name="simple-icons:astro" /></a>
		<a href="https://svelte.dev/" aria-label="Svelte" target="_blank" class="inline-flex"><Icon name="simple-icons:svelte" /></a>
		<span>·</span>
		<a href="https://github.com/tuyuritio/astro-theme-thought-lite" aria-label="Theme" target="_blank" class="inline-flex"><Icon name="simple-icons:github" title={t("theme")} inline /></a>
	</code>
</footer>
