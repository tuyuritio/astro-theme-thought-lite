---
import { i18n } from "astro:config/client";
import { getCollection, render } from "astro:content";
import Time from "$utils/time";
import Base from "$layouts/Base.astro";
import Icon from "$components/Icon.astro";
import Position from "$components/Position.astro";
import Sensitive from "$components/Sensitive.svelte";
import i18nit from "$i18n";

export async function getStaticPaths() {
  const jottings = await getCollection("jotting", jotting => !jotting.data.draft);

  return jottings.map(jotting => {
    const [language, ...id] = jotting.id.split("/");

    return { params: { locale: language == i18n?.defaultLocale ? undefined : language, id: id.join("/") }, props: { jotting } };
  });
}

const { locale = i18n!.defaultLocale } = Astro.params;
const { jotting } = Astro.props;
const { Content, remarkPluginFrontmatter: frontmatter } = await render(jotting);

const t = i18nit(locale);
---

<Base title={jotting.data.title} {locale} description={jotting.data.description} article={{ timestamp: jotting.data.timestamp, tags: jotting.data.tags }}>
  <main class="flex flex-col gap-6">
    <header class="flex flex-col gap-4">
      <h1 class="text-3xl">{jotting.data.title}</h1>
      <div class="flex flex-col gap-3 sm:flex-row children:(flex items-center gap-1 text-3.5 c-secondary)">
        <time title={Time.full(jotting.data.timestamp)}><Icon name="lucide:calendar" />{Time(jotting.data.timestamp)}</time>
        {
          jotting.data.tags?.length && (
            <span>
              <Icon name="lucide:hash" />
              {jotting.data.tags?.join("; ")}
            </span>
          )
        }
        <span><Icon name="lucide:pilcrow" />{t("read.words", { words: frontmatter.words })}</span>
      </div>
      <hr class="b-b b-b-solid b-weak" />
    </header>

    <Sensitive {locale} back="/jotting" sensitive={jotting.data.sensitive} client:load>
      <section id="markdown-content" class="markdown"><Content /></section>
    </Sensitive>

    <Position {locale} />
  </main>
</Base>
