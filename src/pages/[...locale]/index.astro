---
import { i18n } from "astro:config/client";
import { render, getCollection } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import { Icon } from "astro-icon/components";
import Time from "$utils/time";
import Base from "$layouts/Base.astro";
import Heatmap from "$components/Heatmap.svelte";
import config from "$config";
import i18nit from "$i18n";

export async function getStaticPaths() {
  // Create path for each locale, omitting default locale from URL
  return i18n!.locales.map(locale => ({ params: { locale: locale == i18n?.defaultLocale ? undefined : (locale as string) } }));
}

const { locale = i18n!.defaultLocale } = Astro.params;

const t = i18nit(locale);

// Get preface content for current locale, sorted by timestamp (newest first)
const prefaces = (
  await getCollection("preface", preface => {
    // Extract language and ID from file path structure
    const [language, id] = preface.id.split("/");
    preface.id = id;

    // Filter by current locale
    return language == locale;
  })
).sort((a, b) => b.data.timestamp.getTime() - a.data.timestamp.getTime());

// Get published notes for current locale, sorted by timestamp (newest first)
const notes = (
  await getCollection("note", note => {
    // Extract language and note ID from file path structure
    const [language] = note.id.split("/");

    // Filter published notes by current locale
    return !note.data.draft && language == locale;
  })
).sort((a, b) => b.data.timestamp.getTime() - a.data.timestamp.getTime());

// Get published jottings for current locale
const jottings = (
  await getCollection("jotting", jotting => {
    // Extract language and jotting ID from file path structure
    const [language] = jotting.id.split("/");

    // Filter published jottings by current locale
    return !jotting.data.draft && language == locale;
  })
).sort((a, b) => b.data.timestamp.getTime() - a.data.timestamp.getTime());

// Get knowledge items with status "in_progress" for current locale
const readingBooks = await getCollection("knowledge", item => {
  // Extract language from the file path structure
  const [language] = item.id.split("/");

  // Filter criteria: must be published, match locale, and be currently reading
  return !item.data.draft && language == locale && item.data.status == "in_progress";
});

// Get the most recent note and preface for display
const newest = notes[0];
const newestJotting = jottings[0];
const preface = prefaces[0];
// Render preface content if available, otherwise use empty object
const { Content } = preface ? await render(preface) : ({} as any);
---

<Base title={t("navigation.home")} {locale}>
  <main class="flex flex-col gap-5 sm:gap-20 flex-grow">
    <header class="flex items-center justify-center flex-wrap-reverse grow-0.6">
      {config.prologue && <article class="mr-a font-cursive font-thin text-size-xl sm:text-size-2xl line-height-loose whitespace-pre-line">{config.prologue}</article>}
      <Icon name="site-logo" size={100} is:inline />
    </header>

    {
      preface && (
        <section class="flex flex-col">
          <article class="markdown">
            <Content />
          </article>
          <a href={getRelativeLocaleUrl(locale, "/preface")} class="self-end my-2 text-size-sm c-secondary">
            —— {Time.date.locale(preface.data.timestamp, locale)}
          </a>
        </section>
      )
    }

    {
      newest && (
        <footer class="flex flex-col items-center justify-center gap-10">
          <div class="flex items-center justify-center flex-wrap-reverse gap-10 w-full">
            <Heatmap {locale} {notes} {jottings} />

            {config.home?.showNewestJotting && newestJotting ? (
              <div class="flex flex-row gap-10 flex-grow">
                <blockquote class="flex-1">
                  <h3>{t("home.newest")}</h3>
                  <div class="flex flex-col sm:flex-row justify-between gap-1 mt-3">
                    <a href={getRelativeLocaleUrl(locale, `/note/${newest.id.split("/").slice(1).join("/")}`)} class="link">
                      {newest.data.series ? `${newest.data.series} | ` : ""}
                      {newest.data.title}
                    </a>
                    <div class="flex gap-1">
                      {newest.data.tags?.map(tag => (
                        <span class="c-remark text-size-sm">#{tag}</span>
                      ))}
                    </div>
                  </div>
                  <time title={Time.full(newest.data.timestamp)} class="c-remark font-mono text-xs">
                    {Time(newest.data.timestamp)}
                  </time>
                </blockquote>

                <blockquote class="flex-1">
                  <h3>{t("home.newestJotting")}</h3>
                  <div class="flex flex-col sm:flex-row justify-between gap-1 mt-3">
                    <a href={getRelativeLocaleUrl(locale, `/jotting/${newestJotting.id.split("/").slice(1).join("/")}`)} class="link">
                      {newestJotting.data.title}
                    </a>
                    <div class="flex gap-1">
                      {newestJotting.data.tags?.map(tag => (
                        <span class="c-remark text-size-sm">#{tag}</span>
                      ))}
                    </div>
                  </div>
                  <time title={Time.full(newestJotting.data.timestamp)} class="c-remark font-mono text-xs">
                    {Time(newestJotting.data.timestamp)}
                  </time>
                </blockquote>
              </div>
            ) : (
              <blockquote class="flex-grow">
                <h3>{t("home.newest")}</h3>
                <div class="flex flex-col sm:flex-row justify-between gap-1 mt-2">
                  <a href={getRelativeLocaleUrl(locale, `/note/${newest.id.split("/").slice(1).join("/")}`)} class="link">
                    {newest.data.series ? `${newest.data.series} | ` : ""}
                    {newest.data.title}
                  </a>
                  <div class="flex gap-1">
                    {newest.data.tags?.map(tag => (
                      <span class="c-remark text-size-sm">#{tag}</span>
                    ))}
                  </div>
                </div>
                <time title={Time.full(newest.data.timestamp)} class="c-remark font-mono text-xs">
                  {Time(newest.data.timestamp)}
                </time>
              </blockquote>
            )}
          </div>

          {
            config.home?.showReadingBooks && readingBooks.length > 0 && (
              <section class="w-full flex flex-col sm:flex-row items-start sm:items-center gap-5">
                <h3 class="shrink-0">{t("home.currentlyReading")}</h3>
                <div class="flex-grow flex flex-wrap gap-8">
                  {readingBooks.map(book => {
                    const progress = book.data.totalPages && book.data.totalPages > 0
                      ? Math.round((book.data.currentPage / book.data.totalPages) * 100)
                      : 0;
                    return (
                      <a
                        href={getRelativeLocaleUrl(locale, `/library/${book.id.split("/").slice(1).join("/")}`)}
                        class="flex items-center gap-3 group"
                      >
                        <div class="relative w-16 h-16 shrink-0">
                          <svg class="w-16 h-16 transform -rotate-90">
                            <circle
                              cx="32"
                              cy="32"
                              r="28"
                              stroke="currentColor"
                              stroke-width="4"
                              fill="none"
                              class="c-border opacity-20"
                            />
                            <circle
                              cx="32"
                              cy="32"
                              r="28"
                              stroke="currentColor"
                              stroke-width="4"
                              fill="none"
                              stroke-dasharray={`${2 * Math.PI * 28}`}
                              stroke-dashoffset={`${2 * Math.PI * 28 * (1 - progress / 100)}`}
                              class="c-primary transition-all"
                              stroke-linecap="round"
                            />
                          </svg>
                          <div class="absolute inset-0 flex items-center justify-center text-xs font-mono c-remark">
                            {progress}%
                          </div>
                        </div>
                        <div class="flex-grow min-w-0">
                          <div class="font-medium line-clamp-1 group-hover:c-primary transition-colors link">
                            {book.data.title}
                          </div>
                          {book.data.author && (
                            <div class="text-xs c-remark mt-0.5">{book.data.author}</div>
                          )}
                        </div>
                      </a>
                    );
                  })}
                </div>
              </section>
            )
          }
        </footer>
      )
    }
  </main>
</Base>
